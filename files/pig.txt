grunt > file = LOAD 'hdfs://xtlinno1vhdtsg1.xavient.com:8020/tmp/Mahima/pigfile.csv' USING PigStorage(',') AS (line:chararray);


 dump file
 //it produces output jo characters honge bas vhi
 
 
 
 student = LOAD 'hdfs://xtlinno1vhdtsg1.xavient.com:8020/tmp/Mahima/sample1.txt' USING PigStorage(',')as (id:int);
 //show only 1 column data
 
 student = LOAD 'hdfs://xtlinno1vhdtsg1.xavient.com:8020/tmp/Mahima/sample1.txt' USING PigStorage(',')as (id:int, firstname:chararray );
// show first two column data
describe student;
// it shows
student: {id: int,firstname: chararray}


 
 student = LOAD 'hdfs://xtlinno1vhdtsg1.xavient.com:8020/tmp/Mahima/sample1.txt' USING PigStorage(',')as ( id:int, firstname:chararray,lastname:chararray, phone:chararray, city:chararray );
 dump student
 describe student;
 //it will show decription of particular object
 // it shows
student: {id:int, firstname:chararray,lastname:chararray, phone:chararray, city:chararray}



describe object------------- describe student;
show data---------dump student
store data into an object---------------student = LOAD 'hdfs://xtlinno1vhdtsg1.xavient.com:8020/tmp/Mahima/sample1.txt' USING PigStorage(',')as (id:int);

to show data in tabular form------- illustrate student;
to group by phone---------group_data = GROUP student by phone;
dump group_data

to group by firstname---------group_data = GROUP student by firstname;
dump group_data

Describe group_data;
group the relation by age and city*************************************************************
to group multiple by phone--------------------group_multiple = GROUP student by (id, city);
dump group_multiple;


to group all by phone print in descending order--------------------group_all = GROUP student_details All;
dump group_all


to merge two tables using cogroup command******************
 student_details = LOAD 'hdfs://xtlinno1vhdtsg1.xavient.com:8020/tmp/Mahima/student_details.txt' USING PigStorage(',')   as (id:int, firstname:chararray, lastname:chararray, age:int, phone:chararray, city:chararray);

  employee_details = LOAD 'hdfs://xtlinno1vhdtsg1.xavient.com:8020/tmp/Mahima/employee_details.txt' USING PigStorage(',') as (id:int, name:chararray, age:int, city:chararray);

 to merger tables by age------------------------ cogroup_data = COGROUP student_details by age, employee_details by age;
 Dump cogroup_data;
 
 JOIN has 3 types***********************
 
 1=Self - join

Self-join is used to join a table with itself as if the table were two relations, temporarily renaming at least one relation.
 to join 2 tables----------joins = JOIN student_details BY id, employee_details BY id;
dump joins

2=inner join

Inner Join is used quite frequently; it is also referred to as equijoin. An inner join returns rows when there is a match in both tables.

same data jo dono tables me hoga wo usko hi print krega bas
means use hi join krega

3= outer join
left Outer Join

The left outer Join operation returns all rows from the left table, even if there are no matches in the right relation.
means ye left table ko fully print krega chahe uska right table se relation ho ya na ho or jo match krega usko fully print krega
outer_left = JOIN student_details BY id LEFT OUTER, employee_details BY id;
outer_left = JOIN student_details BY city LEFT OUTER, employee_details BY city; // it shows jo ki match nhi krenge unko b

Right Outer Join

The right outer join operation returns all rows from the right table, even if there are no matches in the left table.
means ye right table ko fully print krega chahe uska left table se relation ho ya na ho or jo match krega usko fully print krega
outer_right = JOIN student_details BY city RIGHT OUTER, employee_details BY city;


Full Outer Join

The full outer join operation returns rows when there is a match in one of the relations.
outer_full = JOIN student_details BY city FULL OUTER, employee_details BY city;

---------multiple keys
 emp = JOIN student_details BY (id,city), employee_details BY (id, city);
 //it prints only left and right table common rows only
